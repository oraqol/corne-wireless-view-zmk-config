/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
rpi: require_prior_idle {
    compatible = "zmk,behavior-hold-tap";
    label = "REQUIRE_PRIOR_IDLE";
    #binding-cells = <2>;
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <125>;
    bindings = <&kp>, <&kp>;
};


    };
    combos {
        compatible = "zmk,combos";
//        l_paren {
//            timeout-ms = <50>;
//            key-positions = <6 7>;
//            bindings = <&kp LPAR>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
//        r_paren {
//            timeout-ms = <50>;
//            key-positions = <7 8>;
//            bindings = <&kp RPAR>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
//        l_brack {
//            timeout-ms = <50>;
//            key-positions = <8 9>;
//            bindings = <&kp LBKT>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
//        r_brack {
//            timeout-ms = <50>;
//            key-positions = <9 10>;
//            bindings = <&kp RBKT>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
//        add {
//            timeout-ms = <100>;
//            key-positions = <18 19>;
//            bindings = <&kp PLUS>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
        apple_key {
            timeout-ms = <100>;
            key-positions = <19 20>;
            bindings = <&kp LGUI>;
            require-prior-idle-ms = <125>;
        };
        ctrler {
            timeout-ms = <100>;
            key-positions = <20 21>;
            bindings = <&sk LCTRL>;
            require-prior-idle-ms = <125>;
        };
        same {
            timeout-ms = <100>;
            key-positions = <21 22>;
            bindings = <&kp EQUAL>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };
        tabs {
            timeout-ms = <100>;
            key-positions = <39 40>;
            bindings = <&kp TAB>;
            require-prior-idle-ms = <125>;
        };
        ents {
            timeout-ms = <100>;
            key-positions = <38 39>;
            bindings = <&kp RET>;
            require-prior-idle-ms = <125>;
        };
        bt1 {
            timeout-ms = <100>;
            key-positions = <1 6>;
            bindings = <&bt BT_SEL 0>;
            require-prior-idle-ms = <125>;
        };
        bt2 {
            timeout-ms = <100>;
            key-positions = <1 7>;
            bindings = <&bt BT_SEL 1>;
            require-prior-idle-ms = <125>;
        };
        bt3 {
            timeout-ms = <100>;
            key-positions = <1 8>;
            bindings = <&bt BT_SEL 2>;
            require-prior-idle-ms = <125>;
        };
        bt4 {
            timeout-ms = <100>;
            key-positions = <1 9>;
            bindings = <&bt BT_SEL 3>;
            require-prior-idle-ms = <125>;
        };
//        bt5 {
//            timeout-ms = <100>;
//            key-positions = <1 10>;
//            bindings = <&bt BT_SEL 4>;
//            require-prior-idle-ms = <125>;
//        };
        btclr {
            timeout-ms = <100>;
            key-positions = <1 18>;
            bindings = <&bt BT_CLR>;
            require-prior-idle-ms = <125>;
        };
        escapades {
            timeout-ms = <100>;
            key-positions = <17 18>;
            bindings = <&kp ESC>;
            require-prior-idle-ms = <125>;
        };
//        cut {
//            timeout-ms = <100>;
//            key-positions = <26 27>;
//            bindings = <&kp K_CUT>;
//            require-prior-idle-ms = <125>;
//        };
//        copy {
//            timeout-ms = <100>;
//            key-positions = <27 28>;
//            bindings = <&kp K_COPY>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
//        paste {
//            timeout-ms = <100>;
//            key-positions = <28 29>;
//            bindings = <&kp K_PASTE>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
//        undo {
//            timeout-ms = <100>;
//            key-positions = <28 29>;
//            bindings = <&kp K_UNDO>;
//            require-prior-idle-ms = <125>;
//            layers = <1>;
//        };
        bang {
            timeout-ms = <100>;
            key-positions = <31 32>;
            bindings = <&kp EXCL>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };
        tilder {
            timeout-ms = <100>;
            key-positions = <37 38>;
            bindings = <&kp TILDE>;
            require-prior-idle-ms = <125>;
        };
        sw_right {
            timeout-ms = <100>;
            key-positions = <27 28>;
            bindings = <&sw_r>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };
        sw_left {
            timeout-ms = <100>;
            key-positions = <26 27>;
            bindings = <&sw_l>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };
        pan_right {
            timeout-ms = <100>;
            key-positions = <15 16>;
            bindings = <&pan_r>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };
        pan_left {
            timeout-ms = <100>;
            key-positions = <14 15>;
            bindings = <&pan_l>;
            require-prior-idle-ms = <125>;
            layers = <1>;
        };
        mv_gm1 {
            timeout-ms = <100>;
            key-positions = <13 22>;
            bindings = <&to 3>;
            require-prior-idle-ms = <125>;
        };
        mv_base {
            timeout-ms = <100>;
            key-positions = <25 34>;
            bindings = <&to 0>;
            require-prior-idle-ms = <125>;
        };
//        mv_maclayer {
//            timeout-ms = <100>;
//            key-positions = <1 10>;
//            bindings = <&to 5>;
//            require-prior-idle-ms = <125>;
//        };    
        sw_col {
            timeout-ms = <100>;
            key-positions = <36 41>;
            bindings = <&colemak>;
            require-prior-idle-ms = <125>;
        };
        sc_esc {
            timeout-ms = <100>;
            key-positions = <13 14 15 16>;
            bindings = <&mo 5>;
            require-prior-idle-ms = <125>;
        };
//        sc_tab {
//            timeout-ms = <100>;
//            key-positions = <19 20 21>;
//            bindings = <&kp ESC>;
//            require-prior-idle-ms = <125>;
//        };
        shifter {
            timeout-ms = <100>;
            key-positions = <36 37>;
            bindings = <&sk LSHFT>;
            require-prior-idle-ms = <125>;
        };
    };

    macros {
        colemak: colemak {
            label = "colemak";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>, <&macro_press &kp SPACE>,  <&macro_release &kp SPACE>, <&macro_release &kp LGUI>;
        };
        sel_a: sel_a {
            label = "sel_a";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LCTRL>, <&kp A>;
        };
        sw_r: sw_r {
            label = "sw_r";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>, <&macro_press &kp LCTRL>, <&macro_tap &kp RIGHT>,  <&macro_release &kp LCTRL>, <&macro_release &kp LGUI>;
        };
        sw_l: sw_l {
            label = "sw_l";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LGUI>, <&macro_press &kp LCTRL>, <&macro_tap &kp LEFT>,  <&macro_release &kp LCTRL>, <&macro_release &kp LGUI>;
        };
        pan_r: pan_r {
            label = "pan_r";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>, <&macro_tap &kp TAB>, <&macro_release &kp LALT>;
        };
        pan_l: pan_l {
            label = "pan_l";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>, <&macro_press &kp LSHFT>, <&macro_tap &kp TAB>, <&macro_release &kp LSHFT>, <&macro_release &kp LALT>;
        };
        w_delete: w_delete {
            label = "w_delete";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHFT &kp T>;
        };
        p_pass: p_pass {
            label = "p_pass";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&kp P>, <&kp S>, <&kp I>, <&kp A>, <&kp C>, <&kp T>, <&kp I>, <&kp V> , <&kp E>, <&kp 1>, <&kp QMARK>, <&kp RET>;
        };
        ping: ping {
            label = "ping";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>, <&macro_press &kp G>,  <&macro_release &kp G>, <&macro_release &kp LALT>;
        };
        sc_crtl: sc_crtl {
            label = "sc_crtl";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &mo 4>, <&macro_press &kp LCTRL>,  <&macro_release &kp LCTRL>, <&macro_release &mo 4>;
        };
        speed_up: speed_up {
            label = "speed_up";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_press &kp LSHFT>, <&macro_press &kp UP>,  <&macro_release &kp LCTRL>, <&macro_release &kp LSHFT>, <&macro_release &kp UP>;
        };
        speed_dn: speed_dn {
            label = "speed_dn";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTRL>, <&macro_press &kp LSHFT>, <&macro_press &kp DOWN>, <&macro_release &kp LCTRL>, <&macro_release &kp LSHFT>, <&macro_release &kp DOWN>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  0  |  1  |  2  |  3  | 4   |  5  |        |   6  |   7  |   8  |   9  |  10  |  11  |
// | 12  | 13  | 14  | 15  | 16  | 17  |        |  18  |  19  |  20  |  21  |  22  |  23  |
// | 24  | 25  | 26  | 27  | 28  | 29  |        |  30  |  31  |  32  |  33  |  34  |  35  |
//                |  36  | 37   |  38  |        |  39  |  40  |  41  |
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  F  |  P  |  G  |     |  J  |  L   |  U  |  Y  |  ;  | BKSP |
// | CTRL |  A  |  R  |  S  |  T  |  D  |     |  H  |  N   |  E  |  I  |  O  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |     |  K  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |     | ENT | RSE  | ALT |
                        label = "Base";
                        bindings = <
   &trans &kp Q &kp W &kp F &kp P &kp G   &kp J &kp L  &kp U     &kp Y   &mt DQT SQT    &trans
   &trans &kp A &kp R &kp S &kp T &kp D   &kp H &kp N  &kp E     &kp I   &kp O          &trans
   &trans &kp Z &kp X &kp C &kp V &kp B   &kp K &kp M  &kp COMMA &kp DOT &mt QMARK FSLH &trans
             &kp LCTRL &mo 2  &kp BSPC    &kp SPACE &mo 1 &kp LGUI
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        label = "Lower";
                        bindings = <
   &trans &kp FSLH  &kp BSLH  &kp COLON &kp SEMI  &kp PIPE       &kp PG_DN  &kp HOME  &kp END  &kp C_VOL_UP   &kp C_VOL_DN &trans
   &trans &kp LPAR  &kp RPAR  &kp LBKT  &kp RBKT  &kp QMARK      &kp PG_UP  &kp LEFT      &kp UP        &kp DOWN   &kp RIGHT &trans
   &trans &kp LT    &kp GT    &kp EXCL  &kp HASH  &kp UNDER      &kp EQUAL  &kp HOME      &kp END       &kp AT     &kp AMPS &trans
                     &kp LGUI   &kp LALT  &kp BSPC       &kp LCTRL     &kp LSHFT  &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        label = "Raise";
                        bindings = <
   &trans &kp DLLR    &trans     &kp RBRC    &kp RBRC     &kp PRCNT           &kp CARET &kp N1 &kp N2 &kp N3 &kp PLUS  &trans
   &trans &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &trans        &kp UNDER &kp N4 &kp N5 &kp N6 &kp MINUS &trans
   &trans &trans  &trans  &trans  &trans  &trans                        &kp KP_MULTIPLY &kp N7 &kp N8 &kp N9 &kp N0    &trans
                    	     &kp LGUI &trans   &kp BSPC                 &kp UNDER   &kp MINUS    &kp RALT
                        >;
                };
                game_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        label = "Game_Layer";
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &ping &kp N1 &kp N2 &kp N3 &kp N4    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp A &mkp LCLK  &mkp RCLK     &kp TAB   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp A &kp LEFT &kp UP &kp DOWN &kp RIGHT &kp ESC
                  &kp SPACE &kp LSHFT &kp LCTRL   &kp F2 &kp RCTRL &kp RALT
                        >;
                };
                game_layer_2 {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        label = "Game_Layer_2";
                        bindings = <
   &kp TAB   &kp N5 &kp N6 &kp N7 &kp N8 &trans   &kp Y &kp U  &kp I     &kp O   &to 0    &kp BSPC
   &kp LCTRL &kp N1 &kp N2 &kp LSHFT &kp LCTRL &ping   &mwh SCROLL_UP &mkp LCLK  &mkp RCLK     &mkp MCLK   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp LCTRL &kp LALT   &mwh SCROLL_DOWN &kp K_COPY  &kp K_PASTE &kp K_CUT &kp FSLH &kp ESC
                  &kp F2 &to 3 &kp LSHFT   &sel_a  &kp K_UNDO &kp K_REDO
                        >;
                };
                maclayer1 {
// -----------------------------------------------------------------------------------------
// |  0  |  1  |  2  |  3  | 4   |  5  |        |   6  |   7  |   8  |   9  |  10  |  11  |
// | 12  | 13  | 14  | 15  | 16  | 17  |        |  18  |  19  |  20  |  21  |  22  |  23  |
// | 24  | 25  | 26  | 27  | 28  | 29  |        |  30  |  31  |  32  |  33  |  34  |  35  |
//                |  36  | 37   |  38  |        |  39  |  40  |  41  |
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  F  |  P  |  G  |     |  J  |  L   |  U  |  Y  |  ;  | BKSP |
// | CTRL |  A  |  R  |  S  |  T  |  D  |     |  H  |  N   |  E  |  I  |  O  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |     |  K  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |     | ENT | RSE  | ALT |
                        label = "maclayerone";
                        bindings = <
   &kp TAB   &kp Q &kp W &kp F &kp P &kp G   &kp J &kp L  &kp U     &kp Y   &mt COLON SQT   &kp BSPC
   &kp LCTRL &kp A &kp R &kp S &kp T &kp D   &kp H &kp N  &kp E     &kp I   &kp O &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp K &kp M  &mt PIPE COMMA &mt BSLH DOT &mt QMARK FSLH &kp ESC
             &kp LALT &kp LSHFT &kp BSPC    &kp SPACE &mo 1 &kp LGUI
                        >;
                };
                maclayer2 {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        label = "maclayertwo";
                        bindings = <
   &kp TAB   &kp N1  &kp N2  &kp N3  &kp N4  &kp AMPS         &kp CARET  &kp C_VOL_UP  &kp C_VOL_DN  &kp PLUS  &kp MINUS &kp BSPC
   &kp LCTRL &kp N5  &kp N6  &kp N7  &kp N8  &kp HASH       &kp PG_UP  &kp LEFT      &kp UP        &kp DOWN   &kp RIGHT &trans
   &kp LSHFT &p_pass   &kp A   &kp N9  &kp N0  &kp UNDER      &kp PG_DN  &kp HOME      &kp END       &kp AT     &kp AT &trans
                          	            &kp LGUI        &kp N9   &kp N0         &kp LCTRL  &to 0   &kp RALT
                        >;
                };
        };
};
